import { name, version } from "../../package.json"

const pagesTransform = (config: string[]) => {
  // index.tsx or page.tsx -> route("/", "index.tsx" or "page.tsx")
  // nested/index.tsx or nested/page.tsx -> route("/nested", "nested/index.tsx" or "nested/page.tsx")
  // [slug]/index.tsx or [slug]/page.tsx -> route("/$slug", "[slug]/index.tsx" or "[slug]/page.tsx")
  // (folder)/index.tsx or (folder)/page.tsx -> route("/", "(folder)/index.tsx" or "(folder)/page.tsx")
  // (folder)/nested/index.tsx or (folder)/nested/page.tsx -> route("/nested", "(folder)/nested/index.tsx" or "(folder)/nested/page.tsx")
  // (folder)/[slug]/index.tsx or (folder)/[slug]/page.tsx -> route("/$slug", "(folder)/[slug]/index.tsx" or "(folder)/[slug]/page.tsx")

  config = config.filter(
    (path) =>
      path === "page.tsx" ||
      path === "index.tsx" ||
      path.endsWith("/page.tsx") ||
      path.endsWith("/index.tsx"),
  )

  // Map to route paths and keep track to avoid duplicates
  const seen = new Set<string>()
  const routes = []

  for (const path of config) {
    let routeSegments = path
      .replace(/\/?(page|index)\.tsx$/, "")
      .split("/")
      .filter(Boolean)

    const routePathSegments = routeSegments.filter(
      (seg) => !/^\(.*\)$/.test(seg),
    )

    const routePath =
      "/" +
      routePathSegments
        .map((seg) =>
          seg.startsWith("[") && seg.endsWith("]")
            ? `$${seg.slice(1, -1)}`
            : seg,
        )
        .join("/")

    const normalizedRoutePath = routePath === "/" ? "/" : routePath

    if (!seen.has(normalizedRoutePath)) {
      seen.add(normalizedRoutePath)
      routes.push(`  route("${normalizedRoutePath}", "${path}")`)
    }
    // If already seen, skip to avoid duplicate route paths
  }

  return routes.join(",\n")
}

export const template = (config: string[]) => {
  const layoutFile = config.includes("__root.tsx")
    ? "__root.tsx"
    : config.includes("layout.tsx")
      ? "layout.tsx"
      : null

  const transformed = layoutFile
    ? `rootRoute("${layoutFile}", [\n${pagesTransform(config)}\n])`
    : null

  return `// @ts-nocheck

// This file was automatically generated by ${name}@${version}
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// prettier-ignore
import { index, layout, physical, rootRoute, route } from "@tanstack/virtual-file-routes";

// prettier-ignore
export const routes = ${transformed};
`
}
